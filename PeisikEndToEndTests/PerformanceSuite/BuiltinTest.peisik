# This program calls all standard library functions (except FailFast... hopefully) and performs basic checks.

import UnitTest

private real PiOver2 1.570796
private real 60Degrees 1.047198
private real 120Degrees 2.094395
private real 240Degrees -2.094395

public int Main()
begin
    # Sanity check the unit test library
    UnitTest.AssertTrue(true)
    UnitTest.AssertFalse(false)
    UnitTest.AssertInt(3, 3)
    UnitTest.AssertReal(3.0, 3.0, 0.0001)
    UnitTest.AssertReal(2.51, 2.5, 0.15)
    
    # Basic comparisons on numeric types
    UnitTest.AssertTrue(<(1, 2))
    UnitTest.AssertFalse(<(1, 1))
    UnitTest.AssertTrue(<(1.1, 2.1))
    
    UnitTest.AssertTrue(<=(1, 2))
    UnitTest.AssertTrue(<=(1, 1))
    UnitTest.AssertFalse(<=(2, 1))
    UnitTest.AssertTrue(<=(1.1, 2.1))
    
    UnitTest.AssertTrue(==(1, 1))
    UnitTest.AssertFalse(==(1, 2))
    UnitTest.AssertTrue(==(1.01, 1.01))
    
    UnitTest.AssertTrue(!=(1, 2))
    UnitTest.AssertFalse(!=(1, 1))
    UnitTest.AssertTrue(!=(1.01, 1.02))
    
    UnitTest.AssertTrue(>(2, 1))
    UnitTest.AssertFalse(>(1, 1))
    UnitTest.AssertTrue(>(1.1, 1))
    
    UnitTest.AssertTrue(>=(2, 1))
    UnitTest.AssertTrue(>=(1, 1))
    UnitTest.AssertFalse(>=(1, 2))
    UnitTest.AssertTrue(>=(2, 1.9))
    
    # Comparisons on bools
    UnitTest.AssertTrue(==(true, true))
    UnitTest.AssertFalse(==(true, false))
    
    UnitTest.AssertTrue(!=(false, true))
    UnitTest.AssertFalse(!=(true, true))
    
    # Arithmetic functions
    UnitTest.AssertInt(+(1, 2), 3)
    UnitTest.AssertReal(+(1, 2.4), 3.4, 0.0001)
    
    UnitTest.AssertInt(-(1, 2), -1)
    UnitTest.AssertReal(-(1, 2.4), -1.4, 0.0001)
    
    UnitTest.AssertInt(*(7, -2), -14)
    UnitTest.AssertReal(*(6, 2.4), 14.4, 0.0001)
    
    UnitTest.AssertReal(/(7, 2), 3.5, 0.0001)
    UnitTest.AssertReal(/(7, -2.1), -3.333333, 0.0001)
    # /(7, 0) # Must fail
    
    UnitTest.AssertInt(//(7, 2), 3)
    UnitTest.AssertInt(//(7.4, 2.1), 3)
    UnitTest.AssertInt(//(7, -2), -3)
    UnitTest.AssertInt(//(7, -2.1), -3)
    # //(7, 0) # Must fail
    
    UnitTest.AssertInt(%(7, 3), 1)
    UnitTest.AssertInt(%(7, 16), 7)
    UnitTest.AssertInt(%(7, -3), 1) # The sign is always positive
    UnitTest.AssertInt(%(-7, -3), 2)
    UnitTest.AssertInt(%(-7, 3), 2)
    # %(7, 0) # Must fail
    
    # Binary operations on integers
    UnitTest.AssertInt(and(15, 21), 5)
    UnitTest.AssertInt(and(-1, 21), 21)
    
    UnitTest.AssertInt(or(15, 21), 31)
    UnitTest.AssertInt(or(-2, 1), -1)
    
    UnitTest.AssertInt(xor(15, 21), 26)
    UnitTest.AssertInt(xor(-1, 21), -22)
    
    UnitTest.AssertInt(not(0), -1)
    UnitTest.AssertInt(not(-3), 2)
    UnitTest.AssertInt(not(15), -16)
    
    # Binary operations on bools
    UnitTest.AssertTrue(and(true, true))
    UnitTest.AssertFalse(and(true, false))
    UnitTest.AssertFalse(and(false, true))
    UnitTest.AssertFalse(and(false, false))
    
    UnitTest.AssertTrue(or(true, true))
    UnitTest.AssertTrue(or(true, false))
    UnitTest.AssertTrue(or(false, true))
    UnitTest.AssertFalse(or(false, false))
    
    UnitTest.AssertFalse(xor(true, true))
    UnitTest.AssertTrue(xor(true, false))
    UnitTest.AssertTrue(xor(false, true))
    UnitTest.AssertFalse(xor(false, false))
    
    UnitTest.AssertFalse(not(true))
    UnitTest.AssertTrue(not(false))
    
    # Basic math
    UnitTest.AssertInt(Math.Abs(1), 1)
    UnitTest.AssertInt(Math.Abs(-2), 2)
    UnitTest.AssertReal(Math.Abs(-2.3), 2.3, 0.0001)
    
    UnitTest.AssertInt(Math.Ceil(1), 1)
    UnitTest.AssertInt(Math.Ceil(1.3), 2)
    UnitTest.AssertInt(Math.Ceil(1.5), 2)
    UnitTest.AssertInt(Math.Ceil(-1.1), -1)
    
    UnitTest.AssertInt(Math.Floor(1), 1)
    UnitTest.AssertInt(Math.Floor(1.5), 1)
    UnitTest.AssertInt(Math.Floor(1.9), 1)
    UnitTest.AssertInt(Math.Floor(-1.1), -2)
    
    UnitTest.AssertInt(Math.Round(1), 1)
    UnitTest.AssertInt(Math.Round(1.1), 1)
    UnitTest.AssertInt(Math.Round(1.5), 2)
    UnitTest.AssertInt(Math.Round(1.9), 2)
    UnitTest.AssertInt(Math.Round(-1.1), -1)
    
    UnitTest.AssertReal(Math.Sqrt(0), 0, 0.0001)
    UnitTest.AssertReal(Math.Sqrt(1), 1, 0.0001)
    UnitTest.AssertReal(Math.Sqrt(2), 1.41421, 0.0001)
    # Math.Sqrt(-1) # Must fail
    
    # Power/logarithmic functions
    UnitTest.AssertReal(Math.Exp(0), 1, 0.0001)
    UnitTest.AssertReal(Math.Exp(1), 2.71828, 0.0001)
    UnitTest.AssertReal(Math.Exp(-1), 0.36787, 0.0001)
    UnitTest.AssertReal(Math.Exp(2.7), 14.87973, 0.0001)
    
    UnitTest.AssertReal(Math.Log(1), 0, 0.0001)
    UnitTest.AssertReal(Math.Log(0.5), -0.69314, 0.0001)
    UnitTest.AssertReal(Math.Log(2.71828), 1, 0.0001)
    UnitTest.AssertReal(Math.Log(10), 2.30258, 0.0001)
    # Math.Log(-1) # Must fail
    
    UnitTest.AssertReal(Math.Pow(10, 0), 1, 0.0001)
    UnitTest.AssertReal(Math.Pow(10, 1), 10, 0.0001)
    UnitTest.AssertReal(Math.Pow(10, 2), 100, 0.0001)
    UnitTest.AssertReal(Math.Pow(2, 2), 4, 0.0001)
    UnitTest.AssertReal(Math.Pow(10, 2.5), 316.227766, 0.0001)
    UnitTest.AssertReal(Math.Pow(10, -2.5), 0.003162, 0.0001)
    
    UnitTest.AssertReal(Math.Pow(-10, 0), 1, 0.0001)
    UnitTest.AssertReal(Math.Pow(-10, 2), 100, 0.0001)
    UnitTest.AssertReal(Math.Pow(-10, -3), -0.001, 0.0001)
    # Math.Pow(-10, 2.5) # Must fail
    
    # Trigonometric functions
    UnitTest.AssertReal(Math.Sin(0), 0, 0.0001)
    UnitTest.AssertReal(Math.Sin(PiOver2), 1, 0.0001)
    UnitTest.AssertReal(Math.Sin(60Degrees), 0.86602, 0.0001)
    UnitTest.AssertReal(Math.Sin(240Degrees), -0.86602, 0.0001)
    
    UnitTest.AssertReal(Math.Cos(0), 1, 0.0001)
    UnitTest.AssertReal(Math.Cos(PiOver2), 0, 0.0001)
    UnitTest.AssertReal(Math.Cos(60Degrees), 0.5, 0.0001)
    UnitTest.AssertReal(Math.Cos(240Degrees), -0.5, 0.0001)
    
    UnitTest.AssertReal(Math.Tan(0), 0, 0.0001)
    UnitTest.AssertReal(Math.Tan(60Degrees), 1.73205, 0.0001)
    UnitTest.AssertReal(Math.Tan(120Degrees), -1.73205, 0.0001)
    UnitTest.AssertReal(Math.Tan(240Degrees), 1.73205, 0.0001)
    
    # Inverse trigonometric functions
    UnitTest.AssertReal(Math.Asin(Math.Sin(0)), 0, 0.0001)
    UnitTest.AssertReal(Math.Asin(Math.Sin(1)), 1, 0.0001)
    UnitTest.AssertReal(Math.Asin(Math.Sin(240Degrees)), -(60Degrees), 0.0001)
    # Math.Asin(-2) # Must fail
    # Math.Asin(2) # Must fail
    
    UnitTest.AssertReal(Math.Acos(Math.cos(0)), 0, 0.0001)
    UnitTest.AssertReal(Math.Acos(Math.cos(1)), 1, 0.0001)
    UnitTest.AssertReal(Math.Acos(Math.cos(240Degrees)), 120Degrees, 0.0001)
    # Math.Acos(-2) # Must fail
    # Math.Acos(2) # Must fail
    
    UnitTest.AssertReal(Math.Atan(Math.tan(0)), 0, 0.0001)
    UnitTest.AssertReal(Math.Atan(Math.tan(1)), 1, 0.0001)
    UnitTest.AssertReal(Math.Atan(Math.tan(-1)), -1, 0.0001)
    UnitTest.AssertReal(Math.Atan(Math.tan(240Degrees)), 60Degrees, 0.0001)
    
    return 100
end